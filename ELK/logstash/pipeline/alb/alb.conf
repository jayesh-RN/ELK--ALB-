input {
  s3 {
    bucket => "si-global-elb-logs-demo"
    prefix => "SI_ALB/"
    region => "us-east-1"
    type => "alb-log"
    codec => plain {
      charset => "UTF-8"
    }
    add_field => {
      "doctype" => "aws-application-load-balancer"
      "es_index" => "alb-logs"
      "[@metadata][input_timestamp]" => "%{@timestamp}"
    }
    sincedb_path => "/var/lib/logstash/sincedb.log"
  }
}

filter {
  # Backup original message
  mutate {
    add_field => {
      "[@metadata][original_message]" => "%{message}"
    }
  }

  # Fingerprint with error handling      ---> ya use kuki bina iske mujhko sirf eak hi log dikh raha tha
  ruby {
    code => '
      begin
        event.set("[@metadata][fingerprint]", Digest::SHA256.hexdigest(event.get("message")))
      rescue => e
        event.tag("_fingerprintfailure")
        event.set("[@metadata][error]", "Fingerprint generation failed: #{e.message}")
      end
    '
  }

  if [doctype] == "aws-application-load-balancer" or [log_format] == "aws-application-load-balancer" {
    
    grok {
      match => [ "message", '%{NOTSPACE:request_type} %{TIMESTAMP_ISO8601:log_timestamp} %{NOTSPACE:alb-name} %{NOTSPACE:client} %{NOTSPACE:target} %{NOTSPACE:request_processing_time:float} %{NOTSPACE:target_processing_time:float} %{NOTSPACE:response_processing_time:float} %{NOTSPACE:elb_status_code} %{NOTSPACE:target_status_code:int} %{NOTSPACE:received_bytes:float} %{NOTSPACE:sent_bytes:float} %{QUOTEDSTRING:request} %{QUOTEDSTRING:user_agent} %{NOTSPACE:ssl_cipher} %{NOTSPACE:ssl_protocol} %{NOTSPACE:target_group_arn} %{QUOTEDSTRING:trace_id} "%{DATA:domain_name}" "%{DATA:chosen_cert_arn}" %{NOTSPACE:matched_rule_priority} %{TIMESTAMP_ISO8601:request_creation_time} "%{DATA:actions_executed}" "%{DATA:redirect_url}" "%{DATA:error_reason}" "%{DATA:target_port_list}" "%{DATA:target_status_code_list}"']
      tag_on_failure => ["_grokparsefailure", "alb_parse_failure"]
      timeout_millis => 10000
    }

    ruby {
      code => '
        folder_path = event.get("[@metadata][s3][key]")
        if folder_path
          immediate_folder = folder_path.split("/")[0] rescue nil
          # Convert to lowercase and set default to "unknown" if empty
          event.set("immediate_folder", (immediate_folder || "unknown").downcase)
        else
          event.set("immediate_folder", "unknown")  # Default to "unknown" if null
        end
      '
    }


    date {
      match => [ "log_timestamp", "ISO8601" ]
      tag_on_failure => ["_dateparsefailure"]
    }

    mutate {
      gsub => [ "immediate_folder", "[^a-zA-Z0-9]", "_" ]  # Replace non-alphanumeric characters with underscores
    }

    # Field validation and cleanup
    if "_grokparsefailure" not in [tags] {
      mutate {
        gsub => [    # gsub: Performs a global substitution to clean unwanted characters from fields.
          "request", '"', "",
          "trace_id", '"', "",
          "user_agent", '"', ""
        ]
      }


      # Safe field parsing with error handling
      ruby {
        code => '
          begin
            # Validate numeric fields
            ["request_processing_time", "target_processing_time", "response_processing_time", 
             "target_status_code", "received_bytes", "sent_bytes"].each do |field|
              if event.get(field)
                event.set(field, event.get(field).to_f) rescue event.set(field, 0.0)
              end
            end

            # Validate string fields
            ["request", "user_agent", "domain_name"].each do |field|
              if event.get(field).nil?
                event.set(field, "UNKNOWN")
              end
            end
          rescue => e
            event.tag("_fieldvalidationerror")
            event.set("[@metadata][validation_error]", e.message)
          end
        '
      }
    }

    # Error aggregation
    if "_grokparsefailure" in [tags] or "_dateparsefailure" in [tags] or "_fieldvalidationerror" in [tags] {
      mutate {
        add_field => {
          "error_details" => {
            "timestamp" => "%{@timestamp}"
            "original_message" => "%{[@metadata][original_message]}"
            "error_tags" => "%{tags}"
          }
        }
      }
    }
  }
}

output {

  if "_grokparsefailure" in [tags] or "_dateparsefailure" in [tags] or "_fieldvalidationerror" in [tags] {
    # Route failed events to a separate index
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "failed_alb_logs-%{[immediate_folder]}-%{+YYYY.MM.dd}"  # Keep failed logs in a generic index
      document_id => "%{[@metadata][fingerprint]}"
    }
  } else {
    # Route successful events to an index based on the immediate folder name
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "alb_logs-%{[immediate_folder]}-%{+YYY.MM.dd}"
      document_id => "%{[@metadata][fingerprint]}"
    }
  }

  # Debug output for local testing
  stdout {
    codec => rubydebug
  }
}


